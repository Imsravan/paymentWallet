 function Hash() {
    this.length = 0;
    this.items = new Array();
    this.keys = new Array();
    for (var i = 0, argsL = arguments.length; i < argsL; i += 2) {
        if (typeof (arguments[i + 1]) != 'undefined') {
            this.items[arguments[i]] = arguments[i + 1];
            this.keys.push(arguments[i]);
            this.length++;
        }
    }

    this.removeItem = function(in_key) {
        var tmp_previous;
        if (typeof (this.items[in_key]) != 'undefined') {
            this.length--;
            var tmp_previous = this.items[in_key];
            delete this.items[in_key];
            var keyIndex = this.hasKey(in_key);
            if (keyIndex != undefined)
                this.keys.splice(keyIndex, 1);
        }
        return tmp_previous;
    }

    this.getItem = function(in_key) {
        return this.items[in_key];
    }

    this.setItem = function(in_key, in_value) {
        var tmp_previous;
        if (typeof (in_value) != 'undefined') {
            if (typeof (this.items[in_key]) == 'undefined')
                this.length++;
            else
                tmp_previous = this.items[in_key];

            this.items[in_key] = in_value;
            if (this.hasKey(in_key) == undefined) {
                this.keys.push(in_key);
            }
        }

        return tmp_previous;
    }

    this.hasItem = function(in_key) {
        return typeof (this.items[in_key]) != 'undefined';
    }

    this.hasKey = function(keyValue) {
        for (var ki = 0, keysL = this.keys.length; ki < keysL; ki++) {
            if (this.keys[ki] == keyValue) {
                return ki;
            }
        }
        return undefined;
    }

    this.clear = function() {
        this.keys.splice(0, this.keys.length);
        this.items.splice(0, this.items.length);

        this.length = 0;
    }
} 
var mset=new Set();
var mobileHash=new Hash();

// Passport
// new LocalStrategy(function(username, password, done){
//     User.findOne({username: username}, function(err, user){
//         if(err) { return done(err) }
//         if(user) { return done(null, false) }
//         else {
// 			var newUser = new User()
// 			newUser.username = username
// 			newUser.password = password
// 			newUser.balance = 0
// 			newUser.cards=[]
// 			newUser.preferences=[]
// 			newUser.documents=[]
// 			newUser.name = fname+lname
// 			newUser.ph_no=ph
// 			newUser.email=email
// 			newUser.address=address

//             newUser.save(function(err){
//                 if(err) { throw err }
//                 return done(null, newUser)
//             })
//         }
//     })
// })

//   if(req.isAuthenticated()){
// 	res.redirect("/wallet");
// } else{

	
// }

// Ticket confirm
<div class="cardWrap">
							  <div class="card cardLeft">
								<h1>Paytm <span>Cinema</span></h1>
								<div class="title">
								  <h2><%= movieName %></h2>
								  <span>movie</span>
								</div>
								<div class="name">
								  <h2><%= theatreName %></h2>
								  <span>Theatre name</span>
								</div>
								<div class="seat">
								  <h2><%= seats %></h2>
								  <span>seat</span>
								</div>
								

							  </div>
							  <div class="card cardRight">
								<div class="eye"></div>
								<div class="number">
								  <h3><%= seats %></h3>
								  <span>seat</span>
								</div>
								<div class="barcode"></div>
							  </div>

							</div>
							
							//Add to cart
							User.findOne({},(err, resultList)=>{
        if(err){
            console.log(JSON.stringify(err));
        }else{
            resultList.itemids.push({
                itemId:req.body.objid,
                quantity:req.body.item_quantity
            });
            resultList.itemids = resultList.itemids.reduce((result, item) => {
            const existing = result.find(xy => String(xy.itemId) === String(item.itemId));
            if (existing) {
                existing.quantity += item.quantity;
            } else {
                result.push(item);
            }
            
            return result;
            }, []);
            resultList.save();
        }
    }).then(()=>{
        User.findOne({},{itemids:1,_id:0},(e,g)=>{
            g.itemids.forEach( item =>{
				Item.find({_id:item.itemId},(err, foundItems)=>{
					if(err){
						console.log(JSON.stringify(err));
					}else{
						foundItems[0].quantity=item.quantity
						itemsToFind.push(foundItems[0]);
					}
				});
            });
        }).then(()=>{
			res.redirect("/cart");
			// res.render("cart",{items:itemsToFind});
		});
    });